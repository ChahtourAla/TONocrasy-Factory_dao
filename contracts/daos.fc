#include "imports/stdlib.fc";

;;Global variables
global cell daos_list;

;;===============================STORAGE=============================

() load_data() impure {
    var ds = get_data().begin_parse();
    daos_list = ds~load_dict();
    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
        .store_dict(daos_list)
        .end_cell()
    );
}

;;============================MESSAGES=============================

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return (); 
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages 
        return ();
    }

    load_data();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == "op::add_new_dao"c){
        int position = in_msg_body~load_uint(256);
        cell address = in_msg_body~load_ref();
        daos_list~udict_set_ref(256,position,address);
        save_data();
        return();
    }
    
    else {
        throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    }

}

;;===============================GETTERS==============================

cell get_daos_list() method_id {
    load_data();
    return daos_list;
}
